#Define config file and import libraries
configfile: "config/config.yaml"
import pandas as pd
from collections import OrderedDict

#Read list of candidate POI charge states produced by preprocessing snakefile
library_info = pd.read_csv("resources/library_info/library_info.csv")
names =  list(set(library_info['name'].values))

#all rule defines default snakefile call without specification of rule: "snakemake" vs. "snakemake "
rule all:
	input:config['run_name']+"_plot_linker.html"


def analyze_tensors_inputs(name, library_info):
	#Pass inputs as fxn of rt-group name wildcard. Creates analyze_tensor() input filenames in fixed pattern, input tensor names include library_info.index and rt-group avg elution time.
	name_inputs = []
	idxs = library_info.index[library_info['name'] == name].tolist()
	for key in config['timepoints']:
		if len(config[key]) > 1:
			for file in config[key]:
				for idx in idxs:
					name_inputs.append("resources/tensors/"+str(idx)+"_"+file+".gz.cpickle.zlib") #TODO: This may break when using .raw as first input, investigate
		else:
			file = config[key][0]
			for idx in idxs:
				name_inputs.append("resources/tensors/"+str(idx)+"_"+file+".gz.cpickle.zlib")

	return name_inputs


rule analyze_tensors:
	#TODO: docstring
	input:
		"resources/library_info/library_info.csv",
		lambda wildcards: analyze_tensors_inputs(wildcards.name, library_info)
	output:
		"resources/ic_time_series/{name}_all_tp_clusters.cpickle.zlib"
	script:
		"scripts/main/analyze_tensors.py"


rule optimize_paths:
	input:
		"resources/library_info/library_info.csv",
		"resources/ic_time_series/{name}_all_tp_clusters.cpickle.zlib"
	output:
		"results/plots/ic_time_series/html/{name}_time_series.html",
		#"plots/ic_time_series/pdf/{name}_time_series.pdf",
		"resources/ic_time_series/{name}_winner.cpickle.zlib",
		"resources/ic_time_series/{name}_runners.cpickle.zlib",
		"resources/ic_time_series/{name}_undeut_grounds.cpickle.zlib",
		"resources/ic_time_series/{name}_winner_scores.cpickle.zlib",
		"resources/ic_time_series/{name}_rtdt_com_cvs.cpickle.zlib"
	script:
		"scripts/main/optimize_paths.py"


rule make_overview_plot:
	input:
		expand("resources/ic_time_series/{name}_winner.cpickle.zlib", name = names), #subset_names),
		expand("resources/ic_time_series/{name}_undeut_grounds.cpickle.zlib", name = names), #subset_names),
		expand("resources/ic_time_series/{name}_winner_scores.cpickle.zlib", name = names), #subset_names),
		expand("resources/ic_time_series/{name}_rtdt_com_cvs.cpickle.zlib", name = names), #subset_names)
	output:
		"results/plots/"+config['run_name']+"_overview.html"
	script:
		"scripts/main/overview_plotter.py"


rule make_plot_linker:
	input:
		"results/plots/"+config['run_name']+"_overview.html",
		expand("results/plots/ic_time_series/html/{name}_time_series.html", name = names), #subset_names)
	output:
		config['run_name']+"_plot_linker.html"
	script:
		"scripts/main/plot_linker.py"


rule calculate_hdx_rates:
	input:
		"resources/ic_time_series/{name}_winner.cpickle.zlib"
	output:
		"resources/rates/{name}_rates.ext" #idk ext atm
	script:
		"scripts/main/hxrates.py"
