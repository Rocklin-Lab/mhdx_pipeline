configfile: "config/config.yaml"

""" Eventual implementation of wine/docker use of convert.exe
rule raw_to_mzml:
	input:
		"data/raw/{timepoint}.RAW"
	output:
		"data/mzml/{timepoint}.mzML"
	script:
		script to run docker/wine env for msconvert.exe
"""
#make flat list of all MS datafiles
all_timepoint_files = []
for key in config['timepoints']:
	for file in config[key]:
		all_timepoint_files.append(file)


rule all:
	input:
		"resources/library_info/library_info.csv",
		expand("resources/mzml/{mzml}.gz", mzml = all_timepoint_files)


rule read_imtbx:
	input:
		#.isotopes files must be made in windows, but only need to be made for undeuterated MS runs
		"resources/isotopes/{undeut_fn}.peaks.isotopes",
		"resources/library_info/new_HX_order.csv"
	output:
		"resources/library_info/{undeut_fn}_intermediate.csv",
		"results/plots/preprocessing/{undeut_fn}_original_mz.pdf",
		"results/plots/preprocessing/{undeut_fn}_adjusted_mz.pdf",
		"results/library_info/{undeut_fn}_mz_calib_dict.pk"
	benchmark:
		"results/benchmarks/read_imtbx.{undeut_fn}.benchmark.txt"
	script:
		"scripts/preprocessing/imtbx_reader.py"


rule gzip_mzmls:
	input:
		"resources/mzml/{mzml}"
	output:
		"resources/mzml/{mzml}.gz"
	benchmark:
		"results/benchmarks/gzip_mzml.{mzml}.benchmark.txt"
	script:
		"scripts/preprocessing/gzip_mzml.py"


rule make_ims_mz_tics:
	#calculates total ionic current of an MS run at each LC retention timepoint, to be used by make_master_list.py
	input:
		"resources/mzml/{mzml}"
	output:
		"resources/tics/{mzml}.ims.mz.tic"
	benchmark:
		"results/benchmarks/make_ims_mz_tics.{mzml}.benchmark.txt"
	script:
		"scripts/preprocessing/make_ims_mz_tics.py"


rule make_library_master_list:
	input:
		"resources/library_info/new_HX_order.csv",
		expand("resources/mzml/{mzml}", mzml = all_timepoint_files[0]),
		expand("resources/library_info/{undeut_fn}_intermediate.csv", undeut_fn = config[0]),
		expand("resources/tics/{mzml}.ims.mz.tic", mzml = all_timepoint_files)
	output:
		"results/plots/preprocessing/stretched_times_plots.pdf",
		"resources/library_info/library_info.csv"
	benchmark:
		"results/benchmarks/make_library_master_list.benchmark.txt"
	script:
		"scripts/preprocessing/make_library_master_list.py"
